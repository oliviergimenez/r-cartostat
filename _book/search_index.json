[
["index.html", "Cartographie avec R à l’usage des statisticiens Introduction Objectifs", " Cartographie avec R à l’usage des statisticiens Thomas Vroylandt 2020-01-21 Introduction Ce support a été rédigé par Thomas Vroylandt, statisticien au sein de la Direction des Statistiques, des Etudes et de l’Evaluation de Pôle emploi. Il est en grande partie inspiré du support de cours réalisé par Maël Theulière : https://maeltheuliere.github.io/rspatial/ Objectifs Ce guide vise à : introduire quelques notions sur les données spatiales ; permettre de représenter des valeurs sous forme de cartes par aplats de couleurs ; permettre de représenter des valeurs sous forme de cartes à ronds proportionnels ; personnaliser ces cartes ; exporter les résultats pour publication. FEUILLE DE STYLE ICI : https://github.com/juba/tidyverse/blob/master/css/tidyverse.css la référence : https://r4ds.had.co.nz/ (en anglais) ; une bonne introduction : https://juba.github.io/tidyverse/ (en français). "],
["tldr.html", "1 TL;DR", " 1 TL;DR Ce chapître résume d’un bloc comment on peut réaliser une carte avec R. On charge les packages. library(tidyverse) library(readxl) On charge les données et on les recode si besoin. bmo_secteur &lt;- read_xlsx(&quot;data/dataset/bmo_2019_secteur.xlsx&quot;) bmo_dep &lt;- bmo_secteur %&gt;% group_by(dep) %&gt;% summarise(nb_proj_tot = sum(nb_proj_tot), nb_proj_diff = sum(nb_proj_diff)) %&gt;% mutate( part_diff = nb_proj_diff / nb_proj_tot * 100, part_diff_classes = cut( part_diff, include.lowest = TRUE, breaks = c(0, 40, 50, 60, 100), labels = c(&quot;Moins de 40 %&quot;, &quot;40-50 %&quot;, &quot;50-60 %&quot;, &quot;60% et plus&quot;) ) ) On importe le fond de carte. shp_dep &lt;- st_read(here(&quot;data/shp/DEP_2018.shp&quot;)) ## Reading layer `DEP_2018&#39; from data source `D:\\r-cartostat\\data\\shp\\DEP_2018.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 101 features and 2 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 99216.86 ymin: 5988964 xmax: 1242426 ymax: 7110480 ## epsg (SRID): NA ## proj4string: +proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +units=m +no_defs On les fusionne. bmo_dep_shp &lt;- shp_dep %&gt;% left_join(bmo_dep, by = c(&quot;DEP&quot; = &quot;dep&quot;)) ## Warning: Column `DEP`/`dep` joining factor and character vector, coercing into character vector On réalise la carte, par exemple par aplat de couleur. Avec les élements d’échelles et de thème. ggplot() + geom_sf(data = bmo_dep_shp, aes(fill = part_diff_classes)) + scale_fill_viridis_d(name = &quot;&quot;, option = &quot;inferno&quot;, direction = -1) + labs(title = &quot;Part des projets difficiles&quot;, caption = &quot;Source : BMO 2019&quot;) + theme_void() Ou par cercles proportionnels. ggplot(data = bmo_dep_shp) + geom_sf() + stat_sf_coordinates(aes(size = nb_proj_tot, color = part_diff)) + scale_color_viridis_c(option = &quot;plasma&quot;, direction = -1) + scale_size_continuous(range = c(1, 10), name = &quot;Nombre de projets&quot;) + labs(caption = &quot;Source : BMO 2019&quot;) + theme_void() On exporte. ggsave( filename = &quot;chemin/nom_du_fichier.png&quot;, width = 297, height = 210, units = &quot;mm&quot;, dpi = 400 ) "],
["préliminaires.html", "2 Préliminaires 2.1 Installer R et Rstudio 2.2 Fonctionner en projet 2.3 Utiliser un package", " 2 Préliminaires 2.1 Installer R et Rstudio 2.1.1 R Du fait des blocages sur les postes de Pôle emploi, pour télécharger R, on doit utiliser l’installeur mis à disposition par la DSI, puis mettre à jour manuellement le logiciel. On dézippe l’installateur dans le D://. Puis on ouvre R et on tape les instructions suivantes : install.packages(&quot;installr&quot;) installr::updateR() Cela met à jour R et va créer un nouveau dossier avec la nouvelle version dans le D://. Il est plus simple de mettre à jour R avant d’installer RStudio. 2.1.2 Rstudio On téléchargera le logiciel au format .zip ici : https://download1.rstudio.org/desktop/windows/RStudio-1.2.5033.zip Il faut ensuite dézipper l’archive dans votre D:// On ouvre ensuite le programme Rstudio.exe situé dans le dossier bin de votre dossier Rstudio. Pensez à créer un raccourci vers ce programme dans votre barre d’accès rapide par exemple. On s’assure qu’il trouve bien le programme R. Sinon il faut lui indiquer l’emplacement du dossier R 3.5.XXX dans le D://. Assurez-vous d’avoir réalisé ces étapes avant la formation. 2.2 Fonctionner en projet 2.2.1 Les projets dans RStudio Pourquoi travailler avec les projets Rstudio plutôt que les scripts R ? Pour la portabilité : le répertoire de travail par défaut d’un projet est le répertoire où est ce projet. Si vous transmettez celui-ci à un collègue, le fait de lancer un programme ne dépend pas de l’arborescence de votre machine : Fini les setwd(\"chemin/qui/marche/uniquement/sur/mon/poste\") ! Pour l’organisation : un projet permet de structurer son analyse de façon plus simple et de diviser le travail entre différents sujets. Pour aller plus loin : les packages, le versioning avec Git, les applications Shiny, tout cela fonctionne dans des projets. Les utiliser maintenant vous facilitera la tâche plus tard. Pour créer un projet : Cliquez sur Project en haut à droite puis New Project. Cliquez sur New Directory. 2.2.2 Désactiver les options de sauvegarde automatique de RStudio Votre code doit être reproductible depuis vos données en entrée vers votre résultat. Pour cela, il est fortement déconseillé de sauvegarder quoique ce soit dans le fichier .RData de sauvegarde par défaut. Pour cela, aller dans Tools-&gt;Global Options… et ensuite conformez vous à ceci 2.2.3 Organiser votre travail Organisez votre projet en créant plusieurs répertoires à l’intérieur de celui-ci (les noms sont des exemples) : data pour vos données ; R ou src pour vos scripts ; figures ou output pour vos sorties. En suivant une telle architecture pour tous vos projets, cela vous permettra d’aller plus vite. 2.3 Utiliser un package R fonctionne selon une logique de modules, appelés “packages”. Ils apportent de nouvelles fonctionnalités à la version de base. 2.3.1 Installer les packages La première étape est donc d’installer les packages qui nous sont utiles pour réaliser des cartes. Cette opération se réalise une fois et il n’est pas nécessaire de la répéter (cela mettra à jour le package). Pour cela, on peut soit : Utiliser RStudio qui nous propose un outil d’installation dans Tools &gt; Install Packages …. Tapez le nom des packages qui vous intéressent, séparés par un espace et appuyez sur Install. Installer les packages en ligne de commande comme ce qui suit install.packages(c(\"sf\", \"tidyverse\")) (pour installer les packages sf et tidyverse). Pour faire des cartes, on va se servir de plusieurs packages : sf qui est dédié à l’analyse spatiale ; tidyverse qui installe et charge d’un seul coup plusieurs packages utiles, dont : dplyr pour la manipulation de données ; forcats pour le recodage des facteurs ; readr pour l’import de données ; ggplot2 pour faire des graphiques. Et en fonction du format d’import des données : readxl pour importer des fichiers Excel (.xls ou .xlsx) ; haven pour importer des tables SAS ; here pour gérer les chemins. Merci d’installer ces packages avant la formation, par exemple avec la commande install.packages(c(\"sf\", \"tidyverse\", \"readxl\", \"haven\", \"here\")) 2.3.2 Charger les packages On les charge dans R à l’aide de l’instruction library(nom_du_package) comme dans le code suivant : library(tidyverse) library(sf) library(readxl) library(haven) library(here) Cela peut renvoyer une erreur, par exemple : library(tidyverses) ## Error in library(tidyverses): there is no package called &#39;tidyverses&#39; Dans ce cas, vérifiez l’orthographe du package. Si l’erreur persiste, vous avez peut-être oublié de l’installer. Quand on utilise une fonction d’un package, on doit préalablement le déclarer avec library() sinon cela renvoiera une erreur. "],
["préparer-vos-données.html", "3 Préparer vos données 3.1 Importer des données 3.2 Pour la cartographie", " 3 Préparer vos données 3.1 Importer des données 3.1.1 Structure d’import On va d’abord importer une donnée dans R, de la façon suivante : nom_du_fichier &lt;- read_extension(&quot;chemin_du_fichier.extension&quot;) Cette instruction comprend 4 éléments : Le nom de la table cible : nom_du_fichier. Son choix est libre mais ne doit pas comprendre d’espaces ou d’accents ; Le pointeur : &lt;-, qui permet de remplir la table cible ; Une fonction de lecture : read_extension() qui diffère selon le type de fichier ; Le chemin du fichier, entre guillemets : \"chemin_du_fichier.extension\". Comme on se situe dans un projet RStudio, celui-ci part de la racine du projet. VOtre console peut vous renvoyer certaines informations sur la façon dont R encode les colonnes (en numérique, en caractère, etc.). 3.1.2 Exemples Le package readxl nous permet d’importer des fichiers Excel. Par exemple ici pour le fichier bmo_2019_idf.xlsx qui se situe dans le dossier data : bmo_secteur &lt;- read_xlsx(&quot;data/dataset/bmo_2019_secteur.xlsx&quot;) Si le fichier avait été : en .xls, l’instruction aurait été read_xls ; en .csv, read_csv2()du package readr ; en SAS (en .sas7bdat), read_sas du package haven ; dans d’autres formats, il existe des fonctions spécifiques. 3.1.3 Afficher la table On peut ensuite afficher la table de données importée de deux façons : La première consiste à l’afficher dans la console en exécutant le nom de la table. Cela affiche des informations sur le type des colonnes et le nombre de lignes et de colonnes. bmo_secteur ## # A tibble: 4,572 x 8 ## gd_secteur_bmo reg dep bassin_bmo ze nb_proj_tot nb_proj_diff nb_proj_sais ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Agriculture 01 971 0101 0101 77.0 58.5 26.5 ## 2 Agriculture 01 971 0101 0102 180. 40.9 0 ## 3 Agriculture 01 971 0102 0106 119. 67.0 94.0 ## 4 Agriculture 01 971 0103 0103 25.8 25.8 13.8 ## 5 Agriculture 01 971 0105 0101 26.4 5.47 5.47 ## 6 Agriculture 02 972 0201 0201 37.3 33.3 0 ## 7 Agriculture 02 972 0202 0204 92.2 19.7 69.6 ## 8 Agriculture 02 972 0202 0206 174. 84.0 85.6 ## 9 Agriculture 02 972 0203 0202 52.6 7.56 52.6 ## 10 Agriculture 02 972 0203 0203 173. 49.0 138. ## # ... with 4,562 more rows La seconde consiste à visualiser la table avec l’instruction View(nom_de_la_table). Cela va afficher un onglet à part. A éviter dans le cas de grosses tables. 3.2 Pour la cartographie Pour réaliser une carte, il faut avoir une table de données à visualiser, qui comprend : un identifiant spatial : code commune, bassin, département, région, etc. ; une valeur : cela peut être une donnée continue (valeur numérique) ou discrète (classe d’une classification par exemple, discrétisation d’une valeur continue). Cette table directement importée sous ce format. Elle peut être aussi calculée avec R. Les opérations utiles sont détaillées en annexe. –&gt; LIEN ANNEXE. Pour notre table, on somme par département puis on calcule la part de projets difficiles et on découpe en classes cette part. bmo_dep &lt;- bmo_secteur %&gt;% group_by(dep) %&gt;% summarise(nb_proj_tot = sum(nb_proj_tot), nb_proj_diff = sum(nb_proj_diff)) %&gt;% mutate( part_diff = nb_proj_diff / nb_proj_tot * 100, part_diff_classes = cut( part_diff, include.lowest = TRUE, breaks = c(0, 40, 50, 60, 100), labels = c(&quot;Moins de 40 %&quot;, &quot;40-50 %&quot;, &quot;50-60 %&quot;, &quot;60% et plus&quot;) ) ) La table aura alors la forme suivante : bmo_dep ## # A tibble: 104 x 5 ## dep nb_proj_tot nb_proj_diff part_diff part_diff_classes ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 01 18464. 10859. 58.8 50-60 % ## 2 02 18418. 9851. 53.5 50-60 % ## 3 03 9394. 4517. 48.1 40-50 % ## 4 04 9686. 4509. 46.6 40-50 % ## 5 05 12376. 5166. 41.7 40-50 % ## 6 06 54174. 25030. 46.2 40-50 % ## 7 07 15975. 7351. 46.0 40-50 % ## 8 08 6233. 3422. 54.9 50-60 % ## 9 09 6454. 2327. 36.1 Moins de 40 % ## 10 10 15068. 6773. 44.9 40-50 % ## # ... with 94 more rows "],
["données-spatiales.html", "4 Données spatiales 4.1 Les données vectorielles 4.2 Importer des données spatiales 4.3 Opérations sur données spatiales 4.4 Ajouter de l’information statistique", " 4 Données spatiales 4.1 Les données vectorielles 4.1.1 Qu’est-ce qu’une donnée vectorielle ? Pour pouvoir représenter une carte, il faut importer un “fond de carte” sur lequel on va appliquer nos valeurs. Il est composé de données dites “vectorielles”, qui correspondent à une géométrie : des polygones, par exemple une zone admistrative : région, département, bassin d’emploi, etc. ; des lignes, comme des routes ou des lignes de train ; des points, à l’instar des centres des communes, de la localisation des agences Pôle emploi ou des adresses des demandeurs d’emploi. 4.1.2 Le format shapefile La donnée vectorielle est stockée dans un ensemble de fichier qu’on appelle des shapefiles (ou “fichier de forme”). Il comprend plusieurs fichiers, avec un nom identique et des formats différents, par exemple .shp, .dbf, .prj, etc. Ces fichiers fonctionnent ensemble et on a besoin de l’ensemble pour utiliser la donnée vectorielle. Il est donc important de ne pas les séparer. 4.1.3 A Pôle emploi On a construit ou récupéré les principaux fonds de carte utilisés à Pôle emploi qui sont disponibles ici : LIEN DU DOSSIER (GITHUB ?) Ces cartes ne sont pas géographiquement exactes puisqu’elles incluent les DOMs rapprochés de la France métropolitaine ainsi qu’un zoom sur l’Île-de-France. Les cartes sont les suivantes : communes ; bassin BMO ; zone d’emploi ; département ; région. METTRE UNE IMAGE DES CARTES Le détail de leur construction est disponible en annexe –&gt; LIEN ANNEXE 4.2 Importer des données spatiales La fonction st_read(), du package sf, va nous permettre de lire ces fichiers. Il faut lui spécifier le chemin vers le fichier .shp. Exemple ici avec l’import des départements. shp_dep &lt;- st_read(here(&quot;data/shp/DEP_2018.shp&quot;)) ## Reading layer `DEP_2018&#39; from data source `D:\\r-cartostat\\data\\shp\\DEP_2018.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 101 features and 2 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 99216.86 ymin: 5988964 xmax: 1242426 ymax: 7110480 ## epsg (SRID): NA ## proj4string: +proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +units=m +no_defs On peut en visualiser le contenu. On observe qu’on a un fichier avec une colonne DEP, qui contient le code du département, ainsi qu’une colonne geometry qui contient les spécifications spatiales. shp_dep ## Simple feature collection with 101 features and 2 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 99216.86 ymin: 5988964 xmax: 1242426 ymax: 7110480 ## epsg (SRID): NA ## proj4string: +proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +units=m +no_defs ## First 10 features: ## DEP nom geometry ## 1 01 Ain MULTIPOLYGON (((858244 6525... ## 2 02 Aisne MULTIPOLYGON (((761608 6918... ## 3 03 Allier MULTIPOLYGON (((646325 6582... ## 4 04 Alpes-de-Haute-Provence MULTIPOLYGON (((972562 6298... ## 5 05 Hautes-Alpes MULTIPOLYGON (((957775 6377... ## 6 06 Alpes-Maritimes MULTIPOLYGON (((1028846 627... ## 7 07 Ardèche MULTIPOLYGON (((816772 6361... ## 8 08 Ardennes MULTIPOLYGON (((863817 6940... ## 9 09 Ariège MULTIPOLYGON (((576341 6173... ## 10 10 Aube MULTIPOLYGON (((751637 6784... 4.3 Opérations sur données spatiales De la même façon que pour une table normale, on peut faire des opérations sur un fichier spatial. 4.3.1 Filtre On peut filtrer sur une zone en utilisant filter(). Par exemple si je ne souhaite que l’Oise. shp_dep %&gt;% filter(DEP == &quot;60&quot;) ## Simple feature collection with 1 feature and 2 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 605241 ymin: 6884542 xmax: 712056 ymax: 6963472 ## epsg (SRID): NA ## proj4string: +proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +units=m +no_defs ## DEP nom geometry ## 1 60 Oise MULTIPOLYGON (((703241 6903... 4.3.2 Modification de colonnes Je peux créer des colonnes, par exemple en regroupant les départements en régions. shp_dep_recode &lt;- shp_dep %&gt;% mutate(REG = fct_collapse( DEP, &quot;Hauts-de-France&quot; = c(&quot;02&quot;, &quot;59&quot;, &quot;60&quot;, &quot;62&quot;, &quot;80&quot;), &quot;Ile-de-France&quot; = c(&quot;75&quot;, &quot;77&quot;, &quot;78&quot;, &quot;91&quot;, &quot;92&quot;, &quot;93&quot;, &quot;94&quot;, &quot;95&quot;) )) %&gt;% filter(REG %in% c(&quot;Hauts-de-France&quot;, &quot;Ile-de-France&quot;)) shp_dep_recode ## Simple feature collection with 13 features and 3 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 583917 ymin: 6780072 xmax: 790281 ymax: 7110480 ## epsg (SRID): NA ## proj4string: +proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +units=m +no_defs ## First 10 features: ## DEP nom geometry REG ## 1 02 Aisne MULTIPOLYGON (((761608 6918... Hauts-de-France ## 2 59 Nord MULTIPOLYGON (((700268 7005... Hauts-de-France ## 3 60 Oise MULTIPOLYGON (((703241 6903... Hauts-de-France ## 4 62 Pas-de-Calais MULTIPOLYGON (((642827 7013... Hauts-de-France ## 5 75 Paris MULTIPOLYGON (((656964 6863... Ile-de-France ## 6 77 Seine-et-Marne MULTIPOLYGON (((686674 6781... Ile-de-France ## 7 78 Yvelines MULTIPOLYGON (((621265 6822... Ile-de-France ## 8 80 Somme MULTIPOLYGON (((634135 6954... Hauts-de-France ## 9 91 Essonne MULTIPOLYGON (((654971 6804... Ile-de-France ## 10 92 Hauts-de-Seine MULTIPOLYGON (((650056 6850... Ile-de-France 4.3.3 Regroupement Je peux regrouper des données pour donner des ensembles plus grands. shp_reg_hdf_idf &lt;- shp_dep_recode %&gt;% group_by(REG) %&gt;% summarise() shp_reg_hdf_idf ## Simple feature collection with 2 features and 1 field ## geometry type: POLYGON ## dimension: XY ## bbox: xmin: 583917 ymin: 6780072 xmax: 790281 ymax: 7110480 ## epsg (SRID): NA ## proj4string: +proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +units=m +no_defs ## # A tibble: 2 x 2 ## REG geometry ## * &lt;fct&gt; &lt;POLYGON [m]&gt; ## 1 Hauts-de-France ((617851 6897736, 617447 6897494, 616770 6897289, 616730 6897280, 616474.2 6897369, 61620... ## 2 Ile-de-France ((655721 6802434, 655631 6802370, 655409 6802212, 655404 6802197, 655312.9 6801937, 65516... De fait, avec un fichier communal et des tables de passages, on peut recréer l’ensemble des niveaux. C’est d’ailleurs ainsi que l’on a procédé pour créer les fonds de carte. –&gt; LIEN VERS LE CODE 4.3.4 Enlever la colonne geometry Pour enlever la couche de données spatiales, on utilisera st_drop_geometry(). 4.4 Ajouter de l’information statistique On va ensuite ajouter l’information spatiale au fond de carte, en réalisant une jointure. On part toujours du fond de carte pour la jointure. On s’aperçoit alors qu’on a, pour chaque zone géographique, la difficulté de recrutement, en %. bmo_dep_shp &lt;- shp_dep %&gt;% left_join(bmo_dep, by = c(&quot;DEP&quot; = &quot;dep&quot;)) ## Warning: Column `DEP`/`dep` joining factor and character vector, coercing into character vector bmo_dep_shp ## Simple feature collection with 101 features and 6 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 99216.86 ymin: 5988964 xmax: 1242426 ymax: 7110480 ## epsg (SRID): NA ## proj4string: +proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +units=m +no_defs ## First 10 features: ## DEP nom nb_proj_tot nb_proj_diff part_diff part_diff_classes ## 1 01 Ain 18464.380 10858.960 58.81031 50-60 % ## 2 02 Aisne 18417.870 9850.694 53.48444 50-60 % ## 3 03 Allier 9394.243 4516.847 48.08101 40-50 % ## 4 04 Alpes-de-Haute-Provence 9686.414 4509.349 46.55334 40-50 % ## 5 05 Hautes-Alpes 12376.342 5166.157 41.74219 40-50 % ## 6 06 Alpes-Maritimes 54174.287 25029.646 46.20208 40-50 % ## 7 07 Ardèche 15975.280 7350.657 46.01270 40-50 % ## 8 08 Ardennes 6233.049 3421.614 54.89470 50-60 % ## 9 09 Ariège 6453.668 2326.595 36.05074 Moins de 40 % ## 10 10 Aube 15068.317 6772.623 44.94611 40-50 % ## geometry ## 1 MULTIPOLYGON (((858244 6525... ## 2 MULTIPOLYGON (((761608 6918... ## 3 MULTIPOLYGON (((646325 6582... ## 4 MULTIPOLYGON (((972562 6298... ## 5 MULTIPOLYGON (((957775 6377... ## 6 MULTIPOLYGON (((1028846 627... ## 7 MULTIPOLYGON (((816772 6361... ## 8 MULTIPOLYGON (((863817 6940... ## 9 MULTIPOLYGON (((576341 6173... ## 10 MULTIPOLYGON (((751637 6784... Pour n’avoir qu’une région, il suffit de filtrer en amont sur le fond de carte, exemple avec les Hauts-de-France. bmo_dep_shp_hdf &lt;- shp_dep %&gt;% filter(DEP %in% c(&quot;60&quot;, &quot;02&quot;, &quot;80&quot;, &quot;59&quot;, &quot;62&quot;)) %&gt;% left_join(bmo_dep, by = c(&quot;DEP&quot; = &quot;dep&quot;)) ## Warning: Column `DEP`/`dep` joining factor and character vector, coercing into character vector bmo_dep_shp_hdf ## Simple feature collection with 5 features and 6 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 583917 ymin: 6859784 xmax: 790281 ymax: 7110480 ## epsg (SRID): NA ## proj4string: +proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +units=m +no_defs ## DEP nom nb_proj_tot nb_proj_diff part_diff part_diff_classes geometry ## 1 02 Aisne 18417.87 9850.694 53.48444 50-60 % MULTIPOLYGON (((761608 6918... ## 2 59 Nord 95021.95 45883.249 48.28700 40-50 % MULTIPOLYGON (((700268 7005... ## 3 60 Oise 25263.16 12976.914 51.36694 50-60 % MULTIPOLYGON (((703241 6903... ## 4 62 Pas-de-Calais 45804.86 22472.133 49.06058 40-50 % MULTIPOLYGON (((642827 7013... ## 5 80 Somme 19338.17 8677.044 44.87004 40-50 % MULTIPOLYGON (((634135 6954... "],
["réaliser-les-cartes.html", "5 Réaliser les cartes 5.1 Fonctionnement de ggplot2 5.2 Pour la cartographie", " 5 Réaliser les cartes –&gt; FAIRE UNE VERSION SIMPLIFIEE DANS UNE FONCTION AVEC JUSTE CHOIX DU FOND DE CARTE, JEU DE DONNEES, VARIABLE A AFFICHER, CARTE COULEUR OU ROND, DOSSIER DE L’EXPORT 5.1 Fonctionnement de ggplot2 Pour construire des cartes, on utilise le package ggplot2. Celui-ci nécessite un certain nombre d’éléments : la donnée : on va lui rentrer en entrée une table ; les variables à représenter, à inclure dans l’instruction aes(); les paramètres supplémentaires ; les formes, qui comment par geom_XXX() : quelle représentation s’appliquera aux variables et aux paramètres ; des fonctions qui spécifient l’échelle, le thème, etc. ggplot2 a un fonctionnement par couches, c’est-à-dire qu’on additionne les éléments au fur et à mesure. On lui déclare qu’on veut utiliser le package par l’instruction ggplot() et on ajoute ensuite les couches les unes après les autres avec le +. ggplot() + &lt;FORME&gt;(data = &lt;DATA&gt;, aes(&lt;VARIABLES&gt;), ...= &lt;PARAMS&gt;) + &lt;FONCTION1&gt; La donnée peut se spécifier au niveau du ggplot(data = &lt;DATA&gt;), elle s’appliquera alors à l’ensemble des formes et fonctions, ou au niveau de chaque forme, où elle s’appliquera uniquement à la forme. 5.2 Pour la cartographie Il existe une forme spécifique pour afficher des données spatiales : geom_sf(). 5.2.1 Spécifier la table de données Dans un premier temps, on va lui spécifier quelles sont les données à utiliser, cela nous affiche la carte vide, avec les limites pour chaque unité. ggplot() + geom_sf(data = bmo_dep_shp) On peut jouer sur les paramètres pour élargir ou changer la couleur des frontières. ggplot() + geom_sf(data = bmo_dep_shp, color = &quot;red&quot;, size = 1.1) 5.2.2 Afficher plusieurs couches de données On peut vouloir afficher plusieurs couches de données, par exemple quand on affiche les départements et qu’on veut représenter les limites régionales. On ajoute alors la couche régionale au dessus de la couche départementale. Les limites des régions vont alors se superposer aux limites des départements. On utilise le paramètre alpha = 0 pour lui préciser qu’on souhaite que l’intérieur des zones soit transparente. ggplot() + geom_sf(data = bmo_dep_shp, color = &quot;red&quot;, size = 0.9) + geom_sf(data = reg_shp, color = &quot;blue&quot;, size = 1.1, alpha = 0) "],
["aplats-de-couleurs.html", "6 Aplats de couleurs 6.1 Spécifier la variable à représenter 6.2 Afficher les valeurs", " 6 Aplats de couleurs Les étapes pour réaliser des cartes dites “chroplèthes” ou “par aplats de couleurs” sont détaillées ici. Ces cartes sont notamment intéressantes quand on veut représenter une proportion ou l’appartenance à une classe. 6.1 Spécifier la variable à représenter On va dire quelle variable on souhaite représenter dans l’instruction aes(). Cette variable doit remplir les aires des polygones, on spécifie donc aes(fill = &lt;VARIABLE&gt;). Cette variable doit exister dans la table de donnée. 6.1.1 Continue Elle peut être continue, auquel cas on aura une échelle continue. ggplot() + geom_sf(data = bmo_dep_shp, aes(fill = part_diff)) 6.1.2 Discrète Ou discrète où on aura une échelle discrète : ggplot() + geom_sf(data = bmo_dep_shp, aes(fill = part_diff_classes)) 6.2 Afficher les valeurs Souvent, on souhaite afficher, au niveau de la zone géographique, la valeur qui s’affiche, ou le nom de la zone. Cette opération peut se réaliser par l’ajout d’une couche supplémentaire : geom_sf_label() ou geom_sf_text(). Les deux font la même chose, l’aspect est légèrement différent. Pour que cela fonctionne, il faut lui préciser une valeur à afficher dans aes(label = ), par exemple, la part de projets difficiles (qu’on arrondi au dixième). Comme cette valeur doit se référer à une table de donnée, on a placé celle-ci directement dans le ggplot(). On peut passer des paramètres, comme la taille par exemple. ggplot(data = bmo_dep_shp) + geom_sf(aes(fill = part_diff_classes)) + geom_sf_text(aes(label = round(part_diff, 1)), size = 2.5) "],
["cercles-proportionnels.html", "7 Cercles proportionnels 7.1 Principe 7.2 Personnalisation", " 7 Cercles proportionnels Un autre type de carte représente chaque valeur par un cercle proportionnel et éventuellement une couleur. Ces cartes permettent de mettre en valeur les volumes. 7.1 Principe On les réalise à l’aide de la fonction stat_sf_coordinates(). On procède en plusieurs étapes : on affiche d’abord le fond de carte à vide ; on lui spécifie les valeurs à afficher, ici sur le nombre de projets : nb_proj_tot ; on personnalise ensuite les paramètres des points à afficher, par exemple en ajoutant une couleur, la part de projets difficiles, en classes. ggplot(data = bmo_dep_shp) + geom_sf() + stat_sf_coordinates(aes(size = nb_proj_tot, color = part_diff_classes)) 7.2 Personnalisation On peut jouer sur les paramètres pour afficher d’autres formes. Pour en savoir plus, on peut se reporter aux spécifications du paramètre shape : https://ggplot2.tidyverse.org/articles/ggplot2-specs.html Cela peut supposer de modifier la façon de passer les variables (avec fill plutôt que color par exemple). 7.2.1 Des triangles ggplot(data = bmo_dep_shp) + geom_sf() + stat_sf_coordinates(aes(size = nb_proj_tot, fill = part_diff_classes), shape = 24, color = &quot;black&quot;) 7.2.2 Des carrés ggplot(data = bmo_dep_shp) + geom_sf() + stat_sf_coordinates(aes(size = nb_proj_tot, fill = part_diff_classes), shape = 22, color = &quot;black&quot;) "],
["personnaliser-vos-cartes.html", "8 Personnaliser vos cartes 8.1 Les échelles 8.2 Titre et légende 8.3 Le thème", " 8 Personnaliser vos cartes 8.1 Les échelles Les échelles se personnalisent avec une fonction du type scale_xxx_type() où xxx est correspond à la modalité d’affichage de notre variable dans aes() (par exemple fill, color, size) ; type au type de l’échelle (discrète, continue, manuelle, en gradient, etc.). Une échelle correspond toujours à une variable déclarée dans aes(). On peut déclarer le nom de la légende avec name =. D’autres paramètres s’ajoutent en fonction de l’échelle. Vous pouvez en savoir plus ici : https://ggplot2.tidyverse.org/reference/index.html#section-scales 8.1.1 Echelles de couleur continues Pour les variables continues, on privilégiera scale_xxx_gradient(), qui affiche un gradient de couleur où on lui donne la couleur basse et haute. ggplot() + geom_sf(data = bmo_dep_shp, aes(fill = part_diff)) + scale_fill_gradient(name = &quot;Difficulté de recrutement&quot;, low = &quot;white&quot;, high = &quot;red&quot;) Dans le cas où on a deux gammes de valeurs, par exemple négatives et positives, on peut utiliser scale_xxx_gradient2() qui comprend un paramètre mid, pour la valeur du milieu. 8.1.2 Echelles de couleur manuelles Pour les échelles discrètes, il peut être intéressant de préciser manuellement les couleurs que l’on souhaite voir apparaître, soit avec leur nom, soit avec leur code (https://www.colorhexa.com/). On utilise alors scale_xxx_manual(). Par exemple ici sur le remplissage des zones : ggplot() + geom_sf(data = bmo_dep_shp, aes(fill = part_diff_classes)) + scale_fill_manual(name = &quot;Difficulté de recrutement&quot;, values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;)) Ou pour la couleur de points : ggplot(data = bmo_dep_shp) + geom_sf() + stat_sf_coordinates(aes(size = nb_proj_tot, color = part_diff_classes)) + scale_color_manual(name = &quot;Difficulté de recrutement&quot;, values = c(&quot;#db4545&quot;, &quot;#c72626&quot;, &quot;#9d1e1e&quot;, &quot;#721616&quot;)) 8.1.3 Echelles de couleur existantes Un certain nombre d’échelles de couleurs sont déjà inclus dans le package. On peut particulièrement recommander les palettes issues de viridis, qui sont spécialement pensées pour être adaptées aux personnes souffrant de déficience visuelle. Elles peuvent avoir des difficultées à distinguer certaines couleurs ou différences de couleurs. Plus d’informations : https://ggplot2.tidyverse.org/reference/scale_viridis.html On s’y réfère par scale_xxx_viridis_d() pour les palettes discrètes et scale_xxx_viridis_c() pour les palettes continues. On peut aussi régler le sens de la palette avec direction. ggplot() + geom_sf(data = bmo_dep_shp, aes(fill = part_diff_classes)) + scale_fill_viridis_d(direction = -1) ggplot(data = bmo_dep_shp) + geom_sf() + stat_sf_coordinates(aes(size = nb_proj_tot, color = part_diff)) + scale_color_viridis_c(option = &quot;inferno&quot;) 8.1.4 Autres échelles On utilisera aussi scale pour régler les autres paramètres, par exemple la taille des points, ici en précisant une rangée de valeurs (range =), ce qui augmente l’écart entre la taille des points. ggplot(data = bmo_dep_shp) + geom_sf() + stat_sf_coordinates(aes(size = nb_proj_tot), shape = 22, fill = &quot;red&quot;) + scale_size_continuous(name = &quot;Nombre de projets&quot;, range = c(1, 10)) Le même principe peut s’appliquer aux autres paramètres passés dans aes(). 8.2 Titre et légende La fonction labs() permet d’ajouter un titre et une légende. ggplot() + geom_sf(data = bmo_dep_shp, aes(fill = part_diff_classes)) + scale_fill_viridis_d(name = &quot;&quot;, option = &quot;inferno&quot;, direction = -1) + labs(title = &quot;Part des projets difficiles&quot;, caption = &quot;Source : BMO 2019&quot;) 8.3 Le thème La thème (theme()) contient tous les éléments de personnalisation de votre graphique. Il y en a beaucoup et vous pouvez pousser très loin : https://ggplot2.tidyverse.org/reference/theme.html. On se contentera ici d’appliquer un thème prédéfini : theme_void(), qui retire le fond gris et les axes. ggplot() + geom_sf(data = bmo_dep_shp, aes(fill = part_diff_classes)) + scale_fill_viridis_d(name = &quot;&quot;, option = &quot;inferno&quot;, direction = -1) + labs(title = &quot;Part des projets difficiles&quot;, caption = &quot;Source : BMO 2019&quot;) + theme_void() Notre carte a maintenant son aspect définitif. "],
["exporter-vos-résultats.html", "9 Exporter vos résultats 9.1 Avec l’outil d’export 9.2 Avec ggsave", " 9 Exporter vos résultats 9.1 Avec l’outil d’export RStudio propose un outil d’export lorsqu’on affiche un graphique. Il suffit de cliquer dessus pour faire apparaître une console. On spécifie alors le dossier, le nom du fichier et les dimensions et exporte le résultat. Cet outil a comme avantage d’être simple. Ses inconvénients majeurs sont : clique-bouton : on ne peut pas l’automatiser ; la taille par défaut de l’export dépend de la taille de l’affichage dans votre zone de graphique. 9.2 Avec ggsave On peut utiliser la fonction ggsave qui nous permet de configurer l’export. On utilise les options : filename pour le nom du fichier ; height et width pour la hauteur et la largueur ; units pour l’unité de hauteur et de largueur ; dpi pour la résolution, par défaut 300. Par défaut, le graphique sauvegardé est le dernier réalisé. ggsave( filename = &quot;chemin/nom_du_fichier.png&quot;, width = 297, height = 210, units = &quot;mm&quot;, dpi = 400 ) "],
["recoder-vos-données.html", "Recoder vos données", " Recoder vos données Vos tables de données ne seront pas forcément propres ou au bon format lorsque vous les importerez. Il importe donc de les recoder. Pour ces opérations, vous pouvez vous reporter au manuel de Julien Barnier, Introduction à R et au tidyverse qui offre de façon pédagogique et rapide un bon aperçu de ces méthodes de recodage : https://juba.github.io/tidyverse/ On pourra particulièrement se concentrer sur les chapitres 9 (Recoder des variables) et 10 (Manipuler des données avec dplyr), qui permettront de balayer la majeure partie des besoins pour la cartographie. "]
]
